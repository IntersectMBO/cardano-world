@misc{ouroboros-classic,
    author = {Aggelos Kiayias and Alexander Russell and Bernardo David and Roman Oliynykov},
    title = {Ouroboros: A Provably Secure Proof-of-Stake Blockchain Protocol},
    howpublished = {Cryptology ePrint Archive, Report 2016/889},
    year = {2016},
    note = {\url{http://eprint.iacr.org/2016/889}},
}

@misc{ouroboros-genesis,
    author = {Christian Badertscher and Peter Ga\v{z}i and Aggelos Kiayias and Alexander Russell and Vassilis Zikas},
    title  = {Composable Proof-of-Stake Blockchains with Dynamic Availability},
    year   = {2018}
}

@misc{RFC7049,
  author = {C. Bormann and P. Hoffman},
  title = {Concise Binary Object Representation (CBOR)},
  howpublished = {Internet Requests for Comments},
  year = {2013}
}

@misc{cddl,
  author = {H. Birkholz, C. Vigano and C. Bormann},
  title = {Concise data definition language (CDDL): a notational
           convention to express CBOR data structures},
  year = {2018},
  note = {\url{https://tools.ietf.org/id/draft-ietf-cbor-cddl-00.txt}}
}

@article{DBLP:journals/corr/abs-1807-11218,
  author    = {Lars Br{\"{u}}njes and
               Aggelos Kiayias and
               Elias Koutsoupias and
               Aikaterini{-}Panagiota Stouka},
  title     = {Reward Sharing Schemes for Stake Pools},
  journal   = {CoRR},
  volume    = {abs/1807.11218},
  year      = {2018},
  url       = {http://arxiv.org/abs/1807.11218},
  archivePrefix = {arXiv},
  eprint    = {1807.11218},
  timestamp = {Mon, 13 Aug 2018 16:46:26 +0200},
  biburl    = {https://dblp.org/rec/bib/journals/corr/abs-1807-11218},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@InProceedings{stm:harris2006,
  author = {Harris, Tim and Peyton Jones, Simon},
  title = {Transactional memory with data invariants},
  booktitle = {First ACM SIGPLAN Workshop on Languages, Compilers, and Hardware Support for Trans
  actional Computing (TRANSACT'06)},
  year = {2006},
  month = {June},
  abstract = {This paper introduces a mechanism for asserting invariants that are maintained by a
   program that uses atomic memory transactions. The idea is simple: a programmer writes check E 
  where E is an expression that should be preserved by every atomic update for the remainder of t
  he program's execution. We have extended STM Haskell to dynamically evaluate check statements a
  tomically with the user's updates: the result is that we can identify precisely which update is
   the first one to break an invariant.},
  url = {https://www.microsoft.com/en-us/research/publication/transactional-memory-data-invariant
  s/},
  edition = {First ACM SIGPLAN Workshop on Languages, Compilers, and Hardware Support for Transac
  tional Computing (TRANSACT'06)},
}%                                                                                             