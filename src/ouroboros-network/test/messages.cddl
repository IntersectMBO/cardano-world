; The purpose of allMessages is to have an entry point for testing all parts of the specification.
; ! allMessages is NOT a valid wire format !

allMessages
    = [0, chainSyncMessage]
    / [1, reqRespMessage]
    / [2, pingPongMessage]
    / [3, blockFetchMessage]
    / [4, txSubmissionMessage]
    / [5, handshakeMessage]
    / [6, localTxSubmissionMessage]

; The Request Response Protocol and the PingPing protocol
; are uses as examples and for testing.

; Request Response Protocol :
; reference implementation of the codec in
; typed-protocols/src/Network/TypedProtocol/ReqResp/Codec.hs

reqRespMessage
    = msgRequest
    / msgResponse
    / reqRespMsgDone

msgRequest     = [0, requestData]
msgResponse    = [1, responseData]
reqRespMsgDone = [2]

requestData  = bytes .cbor any
responseData = bytes .cbor any

; Ping-Pong Protocol
; reference implementation of the codec in
; typed-protocols/src/Network/TypedProtocol/PingPong/Codec.hs

pingPongMessage
    = msgPing
    / msgPong
    / pingPongMsgDone

msgPing = 0
msgPong = 1
pingPongMsgDone = 2

; ChainSync Protocol
; reference implementation of the codec in :
; ouroboros-network/src/Ouroboros/Network/Protocol/ChainSync/Codec.hs
chainSyncMessage
    = msgRequestNext
    / msgAwaitReply
    / msgRollForward
    / msgRollBackward
    / msgFindIntersect
    / msgIntersectFound
    / msgIntersectNotFound
    / chainSyncMsgDone

msgRequestNext         = [0]
msgAwaitReply          = [1]
msgRollForward         = [2, wrappedHeader, tip]
msgRollBackward        = [3, point, tip]
msgFindIntersect       = [4, points]
msgIntersectFound      = [5, point, tip]
msgIntersectNotFound   = [6, tip]
chainSyncMsgDone       = [7]

wrappedHeader = #6.24(bytes .cbor blockHeader)
tip = [point, uint]

points = [ *point ]

; BlockFetch Protocol
; reference implementation of the codec in :
; ouroboros-network/src/Ouroboros/Network/Protocol/BlockFetch/Codec.hs

blockFetchMessage
     = msgRequestRange
     / msgClientDone
     / msgStartBatch
     / msgNoBlocks
     / msgBlock
     / msgBatchDone

msgRequestRange = [0, point, point]
msgClientDone   = [1]
msgStartBatch   = [2]
msgNoBlocks     = [3]
msgBlock        = [4, #6.24(bytes .cbor block)]
msgBatchDone    = [5]

; Transaction Submission Protocol
; reference implementation of the codec in :
; ouroboros-network/src/Ouroboros/Network/Protocol/TxSubmission/Codec.hs

txSubmissionMessage
    = msgRequestTxIds
    / msgReplyTxIds
    / msgRequestTxs
    / msgReplyTxs
    / tsMsgDone

msgRequestTxIds = [0, tsBlocking, txCount, txCount]
msgReplyTxIds   = [1, [ *txIdAndSize] ]
msgRequestTxs   = [2, tsIdList ]
msgReplyTxs     = [3, tsIdList ]
tsMsgDone       = [4]

tsBlocking      = false / true
txCount         = word16
tsIdList        = [ *txId ] ; The codec only accepts infinite-length list encoding for tsIdList !
txIdAndSize     = [txId, txSizeInBytes]
txId            = int
txSizeInBytes   = word32

; The handshake Protocol
; reference implementation of the codec in:
; ouroboros-network/src/Ouroboros/Network/Protocol/Handshake/Codec.hs

handshakeMessage
    = msgProposeVersions
    / msgAcceptVersion
    / msgRefuse

msgProposeVersions = [0, versionTable]
msgAcceptVersion   = [1, versionNumber, extraParams]
msgRefuse          = [2, refuseReason ]

; CDDL is not expressive enough to describe the all possible values of proposeVersions.
; proposeVersions is a tables that maps version numbers to version parameters.
; The codec requires that the keys are unique and in ascending order.
; This specification only enumerates version numbers from 0..2.

versionNumber = 0 / 1 / 2  ; The test instance of handshake only supports version numbers 1,2 and 3.
; versionNumber = uint     ; A real instance may support for example any unsigned integer as version number.

params       = any
extraParams  = any
versionTable =
    { ? 0 => params
    , ? 1 => params
    , ? 2 => params
    }

refuseReason
    = refuseReasonVersionMismatch
    / refuseReasonHandshakeDecodeError
    / refuseReasonRefused

refuseReasonVersionMismatch      = [0, [ *versionNumber ] ]
refuseReasonHandshakeDecodeError = [1, versionNumber, tstr]
refuseReasonRefused              = [2, versionNumber, tstr]

; The local transaction submission protocol.
; Reference implementation of the codec in:
; ouroboros-network/src/Ouroboros/Network/Protocol/LocalTxSubmission/Codec.hs

localTxSubmissionMessage
    = msgSubmitTx
    / msgAcceptTx
    / msgRejectTx
    / ltMsgDone

msgSubmitTx = [0, transaction ]
msgAcceptTx = [1]
msgRejectTx = [2, rejectReason ]
ltMsgDone   = [3]

; The Codecs are polymorphic in the underlying data types for blocks, points, slot numbers etc..
; The following encodings are used in the test code.

block           = [blockHeader, blockBody]

blockHeader     = [headerHash, chainHash, headerSlot, headerBlockNo , headerBodyHash]
headerHash      = int
chainHash       = genesisHash / blockHash
genesisHash     = []
blockHash       = [int]
blockBody       = tstr
headerSlot      = word64
headerBlockNo   = word64
headerBodyHash  = int

point           = origin / blockHeaderHash
origin          = []
blockHeaderHash = [slotNo, int]
slotNo          = word64

transaction  = int
rejectReason = int

word16 = uint
word32 = uint
word64 = uint
